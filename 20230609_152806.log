2023/06/09 15:28:11 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.10.11 | packaged by Anaconda, Inc. | (main, Apr 20 2023, 18:56:50) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 2063252024
    GPU 0: NVIDIA GeForce RTX 4060 Laptop GPU
    CUDA_HOME: None
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.29.30148 版
    GCC: n/a
    PyTorch: 2.0.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 193431937
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj /FS -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.0
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2063252024
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/09 15:28:11 - mmengine - INFO - Config:
model = dict(
    type='MaskRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        bgr_to_rgb=False,
        pad_mask=True,
        pad_size_divisor=32),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='caffe',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='open-mmlab://detectron2/resnet50_caffe')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=1,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = 'data/balloon_dataset/balloon/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        poly2mask=False),
    dict(
        type='RandomChoiceResize',
        scales=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),
                (1333, 768), (1333, 800)],
        keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon_dataset/balloon/',
        ann_file='train/annotation_coco.json',
        data_prefix=dict(img='train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                poly2mask=False),
            dict(
                type='RandomChoiceResize',
                scales=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),
                        (1333, 768), (1333, 800)],
                keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon_dataset/balloon/',
        ann_file='val/annotation_coco.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon_dataset/balloon/',
        ann_file='val/annotation_coco.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='data/balloon_dataset/balloon/val/annotation_coco.json',
    metric=['bbox', 'segm'],
    format_only=False,
    backend_args=None)
test_evaluator = dict(
    type='CocoMetric',
    ann_file='data/balloon_dataset/balloon/val/annotation_coco.json',
    metric=['bbox', 'segm'],
    format_only=False,
    backend_args=None)
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=50, val_interval=5)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=0.001, by_epoch=False, begin=0, end=500),
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[8, 11],
        gamma=0.1)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001))
auto_scale_lr = dict(enable=False, base_batch_size=16)
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = None
resume = True
metainfo = dict(classes=('balloon', ), palette=[(220, 20, 60)])
launcher = 'none'
work_dir = './work_dirs\\mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon'

2023/06/09 15:28:12 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/09 15:28:12 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/09 15:28:14 - mmengine - INFO - load model from: open-mmlab://detectron2/resnet50_caffe
2023/06/09 15:28:14 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://detectron2/resnet50_caffe
2023/06/09 15:28:14 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: conv1.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2023/06/09 15:28:14 - mmengine - INFO - Auto resumed from the latest checkpoint E:\Study\OpenMMLab\mmdetection-main\work_dirs\mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon\epoch_12.pth.
2023/06/09 15:28:14 - mmengine - INFO - Load checkpoint from E:\Study\OpenMMLab\mmdetection-main\work_dirs\mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon\epoch_12.pth
2023/06/09 15:28:14 - mmengine - INFO - resumed epoch: 12, iter: 732
2023/06/09 15:28:14 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/09 15:28:14 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/09 15:28:14 - mmengine - INFO - Checkpoints will be saved to E:\Study\OpenMMLab\mmdetection-main\work_dirs\mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon.
2023/06/09 15:28:38 - mmengine - INFO - Epoch(train) [13][50/61]  lr: 2.0000e-04  eta: 0:18:00  time: 0.4762  data_time: 0.0848  memory: 1855  loss: 0.3550  loss_rpn_cls: 0.0230  loss_rpn_bbox: 0.0280  loss_cls: 0.0893  acc: 98.8281  loss_bbox: 0.1143  loss_mask: 0.1005
2023/06/09 15:28:42 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:28:42 - mmengine - INFO - Saving checkpoint at 13 epochs
2023/06/09 15:28:58 - mmengine - INFO - Epoch(train) [14][50/61]  lr: 2.0000e-04  eta: 0:13:44  time: 0.2702  data_time: 0.0033  memory: 1856  loss: 0.3645  loss_rpn_cls: 0.0241  loss_rpn_bbox: 0.0269  loss_cls: 0.0918  acc: 89.2578  loss_bbox: 0.1239  loss_mask: 0.0979
2023/06/09 15:29:01 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:29:01 - mmengine - INFO - Saving checkpoint at 14 epochs
2023/06/09 15:29:12 - mmengine - INFO - Epoch(train) [15][50/61]  lr: 2.0000e-04  eta: 0:11:09  time: 0.1921  data_time: 0.0016  memory: 1857  loss: 0.3351  loss_rpn_cls: 0.0215  loss_rpn_bbox: 0.0240  loss_cls: 0.0811  acc: 96.6797  loss_bbox: 0.1141  loss_mask: 0.0945
2023/06/09 15:29:14 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:29:14 - mmengine - INFO - Saving checkpoint at 15 epochs
2023/06/09 15:29:22 - mmengine - INFO - Evaluating bbox...
2023/06/09 15:29:22 - mmengine - INFO - bbox_mAP_copypaste: 0.621 0.746 0.725 0.000 0.402 0.721
2023/06/09 15:29:22 - mmengine - INFO - Evaluating segm...
2023/06/09 15:29:22 - mmengine - INFO - segm_mAP_copypaste: 0.670 0.763 0.717 0.000 0.404 0.777
2023/06/09 15:29:22 - mmengine - INFO - Epoch(val) [15][13/13]    coco/bbox_mAP: 0.6210  coco/bbox_mAP_50: 0.7460  coco/bbox_mAP_75: 0.7250  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4020  coco/bbox_mAP_l: 0.7210  coco/segm_mAP: 0.6700  coco/segm_mAP_50: 0.7630  coco/segm_mAP_75: 0.7170  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.4040  coco/segm_mAP_l: 0.7770  data_time: 0.3094  time: 0.4319
2023/06/09 15:29:31 - mmengine - INFO - Epoch(train) [16][50/61]  lr: 2.0000e-04  eta: 0:09:41  time: 0.1809  data_time: 0.0019  memory: 1897  loss: 0.3541  loss_rpn_cls: 0.0222  loss_rpn_bbox: 0.0298  loss_cls: 0.0863  acc: 96.6797  loss_bbox: 0.1188  loss_mask: 0.0969
2023/06/09 15:29:33 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:29:33 - mmengine - INFO - Saving checkpoint at 16 epochs
2023/06/09 15:29:39 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:29:44 - mmengine - INFO - Epoch(train) [17][50/61]  lr: 2.0000e-04  eta: 0:08:44  time: 0.1844  data_time: 0.0019  memory: 1949  loss: 0.2919  loss_rpn_cls: 0.0159  loss_rpn_bbox: 0.0181  loss_cls: 0.0689  acc: 99.6094  loss_bbox: 0.1025  loss_mask: 0.0864
2023/06/09 15:29:46 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:29:46 - mmengine - INFO - Saving checkpoint at 17 epochs
2023/06/09 15:29:56 - mmengine - INFO - Epoch(train) [18][50/61]  lr: 2.0000e-04  eta: 0:08:02  time: 0.1806  data_time: 0.0015  memory: 1857  loss: 0.3145  loss_rpn_cls: 0.0152  loss_rpn_bbox: 0.0241  loss_cls: 0.0778  acc: 93.9453  loss_bbox: 0.1076  loss_mask: 0.0898
2023/06/09 15:29:58 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:29:58 - mmengine - INFO - Saving checkpoint at 18 epochs
2023/06/09 15:30:08 - mmengine - INFO - Epoch(train) [19][50/61]  lr: 2.0000e-04  eta: 0:07:28  time: 0.1755  data_time: 0.0015  memory: 1949  loss: 0.3116  loss_rpn_cls: 0.0190  loss_rpn_bbox: 0.0260  loss_cls: 0.0746  acc: 96.8750  loss_bbox: 0.1031  loss_mask: 0.0889
2023/06/09 15:30:10 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:30:10 - mmengine - INFO - Saving checkpoint at 19 epochs
2023/06/09 15:30:21 - mmengine - INFO - Epoch(train) [20][50/61]  lr: 2.0000e-04  eta: 0:07:01  time: 0.1787  data_time: 0.0016  memory: 1856  loss: 0.2753  loss_rpn_cls: 0.0135  loss_rpn_bbox: 0.0202  loss_cls: 0.0698  acc: 96.8750  loss_bbox: 0.0955  loss_mask: 0.0763
2023/06/09 15:30:23 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:30:23 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/06/09 15:30:25 - mmengine - INFO - Evaluating bbox...
2023/06/09 15:30:25 - mmengine - INFO - bbox_mAP_copypaste: 0.629 0.750 0.715 0.000 0.384 0.735
2023/06/09 15:30:25 - mmengine - INFO - Evaluating segm...
2023/06/09 15:30:26 - mmengine - INFO - segm_mAP_copypaste: 0.676 0.750 0.728 0.000 0.345 0.799
2023/06/09 15:30:26 - mmengine - INFO - Epoch(val) [20][13/13]    coco/bbox_mAP: 0.6290  coco/bbox_mAP_50: 0.7500  coco/bbox_mAP_75: 0.7150  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3840  coco/bbox_mAP_l: 0.7350  coco/segm_mAP: 0.6760  coco/segm_mAP_50: 0.7500  coco/segm_mAP_75: 0.7280  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.3450  coco/segm_mAP_l: 0.7990  data_time: 0.0139  time: 0.1206
2023/06/09 15:30:34 - mmengine - INFO - Epoch(train) [21][50/61]  lr: 2.0000e-04  eta: 0:06:37  time: 0.1776  data_time: 0.0015  memory: 1949  loss: 0.3299  loss_rpn_cls: 0.0167  loss_rpn_bbox: 0.0227  loss_cls: 0.0824  acc: 99.2188  loss_bbox: 0.1130  loss_mask: 0.0950
2023/06/09 15:30:36 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:30:36 - mmengine - INFO - Saving checkpoint at 21 epochs
2023/06/09 15:30:47 - mmengine - INFO - Epoch(train) [22][50/61]  lr: 2.0000e-04  eta: 0:06:16  time: 0.1800  data_time: 0.0015  memory: 1897  loss: 0.3139  loss_rpn_cls: 0.0150  loss_rpn_bbox: 0.0222  loss_cls: 0.0767  acc: 98.4375  loss_bbox: 0.1078  loss_mask: 0.0922
2023/06/09 15:30:49 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:30:49 - mmengine - INFO - Saving checkpoint at 22 epochs
2023/06/09 15:30:58 - mmengine - INFO - Epoch(train) [23][50/61]  lr: 2.0000e-04  eta: 0:05:55  time: 0.1722  data_time: 0.0018  memory: 1897  loss: 0.2619  loss_rpn_cls: 0.0126  loss_rpn_bbox: 0.0152  loss_cls: 0.0608  acc: 99.0234  loss_bbox: 0.0869  loss_mask: 0.0863
2023/06/09 15:31:01 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:31:01 - mmengine - INFO - Saving checkpoint at 23 epochs
2023/06/09 15:31:11 - mmengine - INFO - Epoch(train) [24][50/61]  lr: 2.0000e-04  eta: 0:05:37  time: 0.1735  data_time: 0.0019  memory: 1856  loss: 0.3073  loss_rpn_cls: 0.0185  loss_rpn_bbox: 0.0250  loss_cls: 0.0732  acc: 86.3281  loss_bbox: 0.1016  loss_mask: 0.0890
2023/06/09 15:31:13 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:31:13 - mmengine - INFO - Saving checkpoint at 24 epochs
2023/06/09 15:31:23 - mmengine - INFO - Epoch(train) [25][50/61]  lr: 2.0000e-04  eta: 0:05:21  time: 0.1840  data_time: 0.0019  memory: 1857  loss: 0.3298  loss_rpn_cls: 0.0151  loss_rpn_bbox: 0.0244  loss_cls: 0.0808  acc: 97.4609  loss_bbox: 0.1123  loss_mask: 0.0971
2023/06/09 15:31:25 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:31:25 - mmengine - INFO - Saving checkpoint at 25 epochs
2023/06/09 15:31:28 - mmengine - INFO - Evaluating bbox...
2023/06/09 15:31:28 - mmengine - INFO - bbox_mAP_copypaste: 0.616 0.747 0.701 0.000 0.393 0.725
2023/06/09 15:31:28 - mmengine - INFO - Evaluating segm...
2023/06/09 15:31:28 - mmengine - INFO - segm_mAP_copypaste: 0.662 0.737 0.717 0.000 0.370 0.784
2023/06/09 15:31:28 - mmengine - INFO - Epoch(val) [25][13/13]    coco/bbox_mAP: 0.6160  coco/bbox_mAP_50: 0.7470  coco/bbox_mAP_75: 0.7010  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3930  coco/bbox_mAP_l: 0.7250  coco/segm_mAP: 0.6620  coco/segm_mAP_50: 0.7370  coco/segm_mAP_75: 0.7170  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.3700  coco/segm_mAP_l: 0.7840  data_time: 0.0135  time: 0.1163
2023/06/09 15:31:37 - mmengine - INFO - Epoch(train) [26][50/61]  lr: 2.0000e-04  eta: 0:05:05  time: 0.1739  data_time: 0.0016  memory: 1897  loss: 0.2868  loss_rpn_cls: 0.0144  loss_rpn_bbox: 0.0200  loss_cls: 0.0686  acc: 99.2188  loss_bbox: 0.0980  loss_mask: 0.0858
2023/06/09 15:31:38 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:31:38 - mmengine - INFO - Saving checkpoint at 26 epochs
2023/06/09 15:31:48 - mmengine - INFO - Epoch(train) [27][50/61]  lr: 2.0000e-04  eta: 0:04:49  time: 0.1714  data_time: 0.0020  memory: 1949  loss: 0.2878  loss_rpn_cls: 0.0150  loss_rpn_bbox: 0.0213  loss_cls: 0.0692  acc: 99.6094  loss_bbox: 0.0975  loss_mask: 0.0846
2023/06/09 15:31:50 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:31:50 - mmengine - INFO - Saving checkpoint at 27 epochs
2023/06/09 15:32:00 - mmengine - INFO - Epoch(train) [28][50/61]  lr: 2.0000e-04  eta: 0:04:33  time: 0.1674  data_time: 0.0016  memory: 1949  loss: 0.2896  loss_rpn_cls: 0.0137  loss_rpn_bbox: 0.0209  loss_cls: 0.0684  acc: 99.4141  loss_bbox: 0.1021  loss_mask: 0.0846
2023/06/09 15:32:02 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:32:02 - mmengine - INFO - Saving checkpoint at 28 epochs
2023/06/09 15:32:11 - mmengine - INFO - Epoch(train) [29][50/61]  lr: 2.0000e-04  eta: 0:04:18  time: 0.1734  data_time: 0.0014  memory: 1948  loss: 0.2845  loss_rpn_cls: 0.0127  loss_rpn_bbox: 0.0196  loss_cls: 0.0670  acc: 87.6953  loss_bbox: 0.0989  loss_mask: 0.0862
2023/06/09 15:32:13 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:32:13 - mmengine - INFO - Saving checkpoint at 29 epochs
2023/06/09 15:32:23 - mmengine - INFO - Epoch(train) [30][50/61]  lr: 2.0000e-04  eta: 0:04:04  time: 0.1746  data_time: 0.0017  memory: 1948  loss: 0.2814  loss_rpn_cls: 0.0108  loss_rpn_bbox: 0.0178  loss_cls: 0.0673  acc: 96.6797  loss_bbox: 0.0997  loss_mask: 0.0858
2023/06/09 15:32:26 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:32:26 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/06/09 15:32:28 - mmengine - INFO - Evaluating bbox...
2023/06/09 15:32:28 - mmengine - INFO - bbox_mAP_copypaste: 0.626 0.741 0.703 0.000 0.393 0.736
2023/06/09 15:32:28 - mmengine - INFO - Evaluating segm...
2023/06/09 15:32:28 - mmengine - INFO - segm_mAP_copypaste: 0.676 0.765 0.729 0.000 0.353 0.806
2023/06/09 15:32:28 - mmengine - INFO - Epoch(val) [30][13/13]    coco/bbox_mAP: 0.6260  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.7030  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3930  coco/bbox_mAP_l: 0.7360  coco/segm_mAP: 0.6760  coco/segm_mAP_50: 0.7650  coco/segm_mAP_75: 0.7290  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.3530  coco/segm_mAP_l: 0.8060  data_time: 0.0132  time: 0.1131
2023/06/09 15:32:37 - mmengine - INFO - Epoch(train) [31][50/61]  lr: 2.0000e-04  eta: 0:03:51  time: 0.1756  data_time: 0.0019  memory: 1948  loss: 0.2858  loss_rpn_cls: 0.0118  loss_rpn_bbox: 0.0177  loss_cls: 0.0718  acc: 99.8047  loss_bbox: 0.0987  loss_mask: 0.0859
2023/06/09 15:32:39 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:32:39 - mmengine - INFO - Saving checkpoint at 31 epochs
2023/06/09 15:32:49 - mmengine - INFO - Epoch(train) [32][50/61]  lr: 2.0000e-04  eta: 0:03:37  time: 0.1719  data_time: 0.0014  memory: 1897  loss: 0.2539  loss_rpn_cls: 0.0099  loss_rpn_bbox: 0.0158  loss_cls: 0.0616  acc: 99.6094  loss_bbox: 0.0871  loss_mask: 0.0796
2023/06/09 15:32:51 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:32:51 - mmengine - INFO - Saving checkpoint at 32 epochs
2023/06/09 15:33:00 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:33:01 - mmengine - INFO - Epoch(train) [33][50/61]  lr: 2.0000e-04  eta: 0:03:24  time: 0.1717  data_time: 0.0020  memory: 1897  loss: 0.2859  loss_rpn_cls: 0.0108  loss_rpn_bbox: 0.0188  loss_cls: 0.0682  acc: 98.8281  loss_bbox: 0.1007  loss_mask: 0.0874
2023/06/09 15:33:03 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:33:03 - mmengine - INFO - Saving checkpoint at 33 epochs
2023/06/09 15:33:12 - mmengine - INFO - Epoch(train) [34][50/61]  lr: 2.0000e-04  eta: 0:03:11  time: 0.1690  data_time: 0.0015  memory: 1950  loss: 0.2685  loss_rpn_cls: 0.0113  loss_rpn_bbox: 0.0191  loss_cls: 0.0642  acc: 98.4375  loss_bbox: 0.0927  loss_mask: 0.0812
2023/06/09 15:33:14 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:33:14 - mmengine - INFO - Saving checkpoint at 34 epochs
2023/06/09 15:33:24 - mmengine - INFO - Epoch(train) [35][50/61]  lr: 2.0000e-04  eta: 0:02:58  time: 0.1710  data_time: 0.0019  memory: 1856  loss: 0.2675  loss_rpn_cls: 0.0111  loss_rpn_bbox: 0.0174  loss_cls: 0.0642  acc: 91.9922  loss_bbox: 0.0944  loss_mask: 0.0804
2023/06/09 15:33:26 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:33:26 - mmengine - INFO - Saving checkpoint at 35 epochs
2023/06/09 15:33:29 - mmengine - INFO - Evaluating bbox...
2023/06/09 15:33:29 - mmengine - INFO - bbox_mAP_copypaste: 0.644 0.754 0.741 0.000 0.393 0.758
2023/06/09 15:33:29 - mmengine - INFO - Evaluating segm...
2023/06/09 15:33:29 - mmengine - INFO - segm_mAP_copypaste: 0.684 0.754 0.754 0.000 0.365 0.814
2023/06/09 15:33:29 - mmengine - INFO - Epoch(val) [35][13/13]    coco/bbox_mAP: 0.6440  coco/bbox_mAP_50: 0.7540  coco/bbox_mAP_75: 0.7410  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3930  coco/bbox_mAP_l: 0.7580  coco/segm_mAP: 0.6840  coco/segm_mAP_50: 0.7540  coco/segm_mAP_75: 0.7540  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.3650  coco/segm_mAP_l: 0.8140  data_time: 0.0131  time: 0.1062
2023/06/09 15:33:37 - mmengine - INFO - Epoch(train) [36][50/61]  lr: 2.0000e-04  eta: 0:02:46  time: 0.1707  data_time: 0.0020  memory: 1949  loss: 0.2724  loss_rpn_cls: 0.0167  loss_rpn_bbox: 0.0193  loss_cls: 0.0616  acc: 98.6328  loss_bbox: 0.0921  loss_mask: 0.0827
2023/06/09 15:33:39 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:33:39 - mmengine - INFO - Saving checkpoint at 36 epochs
2023/06/09 15:33:49 - mmengine - INFO - Epoch(train) [37][50/61]  lr: 2.0000e-04  eta: 0:02:33  time: 0.1691  data_time: 0.0016  memory: 1949  loss: 0.2951  loss_rpn_cls: 0.0168  loss_rpn_bbox: 0.0226  loss_cls: 0.0693  acc: 98.8281  loss_bbox: 0.1027  loss_mask: 0.0838
2023/06/09 15:33:51 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:33:51 - mmengine - INFO - Saving checkpoint at 37 epochs
2023/06/09 15:34:00 - mmengine - INFO - Epoch(train) [38][50/61]  lr: 2.0000e-04  eta: 0:02:21  time: 0.1733  data_time: 0.0022  memory: 1949  loss: 0.2967  loss_rpn_cls: 0.0123  loss_rpn_bbox: 0.0198  loss_cls: 0.0700  acc: 97.8516  loss_bbox: 0.1038  loss_mask: 0.0907
2023/06/09 15:34:02 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:34:02 - mmengine - INFO - Saving checkpoint at 38 epochs
2023/06/09 15:34:12 - mmengine - INFO - Epoch(train) [39][50/61]  lr: 2.0000e-04  eta: 0:02:09  time: 0.1709  data_time: 0.0015  memory: 1950  loss: 0.2863  loss_rpn_cls: 0.0109  loss_rpn_bbox: 0.0216  loss_cls: 0.0652  acc: 99.6094  loss_bbox: 0.1003  loss_mask: 0.0883
2023/06/09 15:34:14 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:34:14 - mmengine - INFO - Saving checkpoint at 39 epochs
2023/06/09 15:34:24 - mmengine - INFO - Epoch(train) [40][50/61]  lr: 2.0000e-04  eta: 0:01:57  time: 0.1877  data_time: 0.0023  memory: 1950  loss: 0.2655  loss_rpn_cls: 0.0102  loss_rpn_bbox: 0.0193  loss_cls: 0.0628  acc: 99.4141  loss_bbox: 0.0911  loss_mask: 0.0821
2023/06/09 15:34:26 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:34:26 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/06/09 15:34:30 - mmengine - INFO - Evaluating bbox...
2023/06/09 15:34:30 - mmengine - INFO - bbox_mAP_copypaste: 0.628 0.760 0.748 0.000 0.378 0.735
2023/06/09 15:34:30 - mmengine - INFO - Evaluating segm...
2023/06/09 15:34:30 - mmengine - INFO - segm_mAP_copypaste: 0.697 0.787 0.748 0.000 0.408 0.823
2023/06/09 15:34:30 - mmengine - INFO - Epoch(val) [40][13/13]    coco/bbox_mAP: 0.6280  coco/bbox_mAP_50: 0.7600  coco/bbox_mAP_75: 0.7480  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3780  coco/bbox_mAP_l: 0.7350  coco/segm_mAP: 0.6970  coco/segm_mAP_50: 0.7870  coco/segm_mAP_75: 0.7480  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.4080  coco/segm_mAP_l: 0.8230  data_time: 0.0129  time: 0.1446
2023/06/09 15:34:40 - mmengine - INFO - Epoch(train) [41][50/61]  lr: 2.0000e-04  eta: 0:01:46  time: 0.1939  data_time: 0.0027  memory: 1856  loss: 0.2811  loss_rpn_cls: 0.0099  loss_rpn_bbox: 0.0223  loss_cls: 0.0658  acc: 99.6094  loss_bbox: 0.1021  loss_mask: 0.0810
2023/06/09 15:34:42 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:34:42 - mmengine - INFO - Saving checkpoint at 41 epochs
2023/06/09 15:34:54 - mmengine - INFO - Epoch(train) [42][50/61]  lr: 2.0000e-04  eta: 0:01:34  time: 0.2013  data_time: 0.0026  memory: 1950  loss: 0.2867  loss_rpn_cls: 0.0102  loss_rpn_bbox: 0.0196  loss_cls: 0.0648  acc: 99.8047  loss_bbox: 0.1009  loss_mask: 0.0912
2023/06/09 15:34:56 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:34:56 - mmengine - INFO - Saving checkpoint at 42 epochs
2023/06/09 15:35:09 - mmengine - INFO - Epoch(train) [43][50/61]  lr: 2.0000e-04  eta: 0:01:23  time: 0.2059  data_time: 0.0031  memory: 1950  loss: 0.2563  loss_rpn_cls: 0.0118  loss_rpn_bbox: 0.0177  loss_cls: 0.0562  acc: 98.8281  loss_bbox: 0.0882  loss_mask: 0.0825
2023/06/09 15:35:11 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:35:11 - mmengine - INFO - Saving checkpoint at 43 epochs
2023/06/09 15:35:24 - mmengine - INFO - Epoch(train) [44][50/61]  lr: 2.0000e-04  eta: 0:01:12  time: 0.2130  data_time: 0.0033  memory: 1897  loss: 0.2770  loss_rpn_cls: 0.0099  loss_rpn_bbox: 0.0197  loss_cls: 0.0661  acc: 98.4375  loss_bbox: 0.0968  loss_mask: 0.0844
2023/06/09 15:35:26 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:35:26 - mmengine - INFO - Saving checkpoint at 44 epochs
2023/06/09 15:35:39 - mmengine - INFO - Epoch(train) [45][50/61]  lr: 2.0000e-04  eta: 0:01:00  time: 0.2084  data_time: 0.0028  memory: 1950  loss: 0.2412  loss_rpn_cls: 0.0097  loss_rpn_bbox: 0.0165  loss_cls: 0.0539  acc: 98.4375  loss_bbox: 0.0825  loss_mask: 0.0787
2023/06/09 15:35:41 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:35:41 - mmengine - INFO - Saving checkpoint at 45 epochs
2023/06/09 15:35:45 - mmengine - INFO - Evaluating bbox...
2023/06/09 15:35:45 - mmengine - INFO - bbox_mAP_copypaste: 0.634 0.761 0.716 0.000 0.369 0.747
2023/06/09 15:35:45 - mmengine - INFO - Evaluating segm...
2023/06/09 15:35:45 - mmengine - INFO - segm_mAP_copypaste: 0.699 0.785 0.761 0.000 0.387 0.827
2023/06/09 15:35:45 - mmengine - INFO - Epoch(val) [45][13/13]    coco/bbox_mAP: 0.6340  coco/bbox_mAP_50: 0.7610  coco/bbox_mAP_75: 0.7160  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3690  coco/bbox_mAP_l: 0.7470  coco/segm_mAP: 0.6990  coco/segm_mAP_50: 0.7850  coco/segm_mAP_75: 0.7610  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.3870  coco/segm_mAP_l: 0.8270  data_time: 0.0133  time: 0.1439
2023/06/09 15:35:55 - mmengine - INFO - Epoch(train) [46][50/61]  lr: 2.0000e-04  eta: 0:00:48  time: 0.2027  data_time: 0.0033  memory: 1855  loss: 0.2282  loss_rpn_cls: 0.0084  loss_rpn_bbox: 0.0153  loss_cls: 0.0543  acc: 98.2422  loss_bbox: 0.0791  loss_mask: 0.0711
2023/06/09 15:35:58 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:35:58 - mmengine - INFO - Saving checkpoint at 46 epochs
2023/06/09 15:36:10 - mmengine - INFO - Epoch(train) [47][50/61]  lr: 2.0000e-04  eta: 0:00:37  time: 0.2140  data_time: 0.0036  memory: 1855  loss: 0.2583  loss_rpn_cls: 0.0098  loss_rpn_bbox: 0.0188  loss_cls: 0.0610  acc: 98.6328  loss_bbox: 0.0906  loss_mask: 0.0782
2023/06/09 15:36:13 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:36:13 - mmengine - INFO - Saving checkpoint at 47 epochs
2023/06/09 15:36:25 - mmengine - INFO - Epoch(train) [48][50/61]  lr: 2.0000e-04  eta: 0:00:25  time: 0.2156  data_time: 0.0037  memory: 1897  loss: 0.2672  loss_rpn_cls: 0.0099  loss_rpn_bbox: 0.0202  loss_cls: 0.0640  acc: 96.8750  loss_bbox: 0.0970  loss_mask: 0.0760
2023/06/09 15:36:27 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:36:27 - mmengine - INFO - Saving checkpoint at 48 epochs
2023/06/09 15:36:40 - mmengine - INFO - Epoch(train) [49][50/61]  lr: 2.0000e-04  eta: 0:00:13  time: 0.2062  data_time: 0.0028  memory: 1857  loss: 0.2394  loss_rpn_cls: 0.0076  loss_rpn_bbox: 0.0161  loss_cls: 0.0572  acc: 96.0938  loss_bbox: 0.0856  loss_mask: 0.0730
2023/06/09 15:36:42 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:36:42 - mmengine - INFO - Saving checkpoint at 49 epochs
2023/06/09 15:36:46 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:36:54 - mmengine - INFO - Epoch(train) [50][50/61]  lr: 2.0000e-04  eta: 0:00:02  time: 0.2101  data_time: 0.0025  memory: 1897  loss: 0.2560  loss_rpn_cls: 0.0085  loss_rpn_bbox: 0.0185  loss_cls: 0.0594  acc: 98.8281  loss_bbox: 0.0890  loss_mask: 0.0806
2023/06/09 15:36:56 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230609_152806
2023/06/09 15:36:56 - mmengine - INFO - Saving checkpoint at 50 epochs
2023/06/09 15:36:59 - mmengine - INFO - Evaluating bbox...
2023/06/09 15:36:59 - mmengine - INFO - bbox_mAP_copypaste: 0.654 0.764 0.743 0.000 0.387 0.765
2023/06/09 15:36:59 - mmengine - INFO - Evaluating segm...
2023/06/09 15:36:59 - mmengine - INFO - segm_mAP_copypaste: 0.704 0.778 0.753 0.000 0.407 0.821
2023/06/09 15:36:59 - mmengine - INFO - Epoch(val) [50][13/13]    coco/bbox_mAP: 0.6540  coco/bbox_mAP_50: 0.7640  coco/bbox_mAP_75: 0.7430  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3870  coco/bbox_mAP_l: 0.7650  coco/segm_mAP: 0.7040  coco/segm_mAP_50: 0.7780  coco/segm_mAP_75: 0.7530  coco/segm_mAP_s: 0.0000  coco/segm_mAP_m: 0.4070  coco/segm_mAP_l: 0.8210  data_time: 0.0126  time: 0.1087
